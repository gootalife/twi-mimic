datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "scheme.md"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts  Account[]
  sessions  Session[]
  tweets    Tweet[]
  likes     Like[]
  follows   Follow[]  @relation("Follows")
  followers Follow[]  @relation("Followers")

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Tweet {
  id        String    @id @default(cuid())
  userId    String
  replyId   String?
  content   String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  replyTo Tweet?  @relation("ReplyTo", fields: [replyId], references: [id])
  replies Tweet[] @relation("ReplyTo")
  like    Like[]

  @@map(name: "tweets")
}

model Like {
  id        String    @id @default(cuid())
  userId    String
  tweetId   String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  tweet Tweet @relation(fields: [tweetId], references: [id])

  @@map(name: "likes")
}

model Follow {
  id        String    @id @default(cuid())
  from      String
  to        String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  userFrom User @relation("Follows", fields: [from], references: [id])
  userTo   User @relation("Followers", fields: [to], references: [id])

  @@map(name: "follows")
}
